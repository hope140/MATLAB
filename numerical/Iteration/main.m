clc;clear

% 方案一
A = [10,-1,-2;
     -1,10,-2;
     -1,-1,5];
b = [7.2,8.3,4.2]';

k1 = Jacobi_k(A,b,[0,0,0]',[1.1,1.2,1.3]');
fprintf('方案一 Jacobi 初值为[0,0,0] 迭代次数为%d\n',k1)
k1 = Gauss_k(A,b,[0,0,0]',[1.1,1.2,1.3]');
fprintf('方案一 Gauss 初值为[0,0,0] 迭代次数为%d\n',k1)
k1 = Jacobi_k(A,b,[1,1,1]',[1.1,1.2,1.3]');
fprintf('方案一 Jacobi 初值为[1,1,1] 迭代次数为%d\n',k1)
k1 = Gauss_k(A,b,[1,1,1]',[1.1,1.2,1.3]');
fprintf('方案一 Gauss 初值为[1,1,1] 迭代次数为%d\n',k1)

% 方案二
A = [27,6,-1;
    6,15,2;
    1,1,54];
b = [85,72,110]';

[x_J2,k2] = Jacobi(A,b,[0,0,0]',1.0e-2);
fprintf('方案二 Jacobi 初值为[1,1,1] 精度到小数点后两位 迭代次数为%d 迭代解为\n',k2)
x = x_J2'
[x_G2,k2] = Gauss(A,b,[0,0,0]',1.0e-2);
fprintf('方案二 Gauss 初值为[1,1,1] 精度到小数点后两位 迭代次数为%d 迭代解为\n',k2)
x = x_G2'

% 方案三
A = [1,5,-3;
    5,-2,1;
    2,1,-5];
b = [2,4,-11]';

[x_J3,k3] = Jacobi(A,b,[0,0,0]',1.0e-2);
fprintf('方案三 Jacobi 初值为[0,0,0] 精度到小数点后两位 迭代次数为%d 迭代解为\n',k3)
x = x_J3'
[x_G3,k3] = Gauss(A,b,[0,0,0]',1.0e-2);
fprintf('方案三 Gauss 初值为[0,0,0] 精度到小数点后两位 迭代次数为%d 迭代解为\n',k3)
x = x_G3'

% 结果发散
